import numpy as np
import wave
import tensorflow as tf
import matplotlib.pyplot as plt
MVN = tf.contrib.distributions.MultivariateNormalDiag
from generate_c import get_signals, big_init
class HMM:
    def __init__(self, M, K, D):
        self.M = M #number of hidden states
        self.K = K #number of hidden Gausians
        self.D = D #Gaussian dimensionality
        
    def set_sessions(self, session):
        self.session = session
        
    def init_random(self, X):
        pi0 = np.ones(self.M).astype(np.float32) #initial state distribution 
        A0 = np.random.randn(self.M, self.M).astype(np.float32) #state transition
        R0 = np.ones((self.M, self.K)).astype(np.float32) #mixture proportions
        
        mu0 = np.zeros((self.M, self.K, self.D))
        for j in range(self.M):
            for k in range(self.K):
                n = np.random.randint(X.shape[0])
                t = np.random.randint(X.shape[1])
                mu0[j, k] = X[n, t]
        mu0 = mu0.astype(np.float32)
        
        sigma0 = np.random.randn(self.M, self.K, self.D).astype(np.float32)
        self.build(pi0, A0, R0, mu0, sigma0)
        
